def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
	keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    flavorDimensions "app"

    productFlavors {
        prod {}
        play {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [CHANNEL: name]
    }

    defaultConfig {
        applicationId "com.mxc.smartcity"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()//System.getenv('APPCENTER_BUILD_ID').toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // signingConfigs {
    //     release {
    //         storeFile rootProject.file("app/key.jks")
    //         storePassword System.getenv("APPCENTER_KEYSTORE_PASSWORD")
    //         keyAlias System.getenv("APPCENTER_KEY_ALIAS")
    //         keyPassword System.getenv("APPCENTER_KEY_PASSWORD")
    //     }
    // }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            // signingConfig signingConfigs.release
            
            // minifyEnabled true
            // useProguard true

            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    def appCenterSdkVersion = '3.2.1'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-distribute:${appCenterSdkVersion}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
